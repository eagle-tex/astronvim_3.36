-- return {
--   {
--   "microsoft/vscode-js-debug",
--   lazy = true,
--   build = "npm install --legacy-peer-deps && npx gulp vsDebugServerBundle && mv dist out"
-- },
--   {
--     "mxsdev/nvim-dap-vscode-js",
--     dependencies = {"mfussenegger/nvim-dap"},
--   },
-- }

---@diagnostic disable-next-line: missing-fields
require("dap-vscode-js").setup {
  -- node_path = "node", -- Path of node executable. Defaults to $NODE_PATH, and then "node"
  -- debugger_path = "(runtimedir)/site/pack/packer/opt/vscode-js-debug", -- Path to vscode-js-debug installation.
  debugger_path = vim.fn.stdpath "data" .. "/mason/packages", -- Path to vscode-js-debug installation.
  debugger_cmd = { "js-debug-adapter" }, -- Command to use to launch the debug server. Takes precedence over `node_path` and `debugger_path`.
  adapters = { "pwa-node", "pwa-chrome", "pwa-msedge", "node-terminal", "pwa-extensionHost" }, -- which adapters to register in nvim-dap
  -- log_file_path = "(stdpath cache)/dap_vscode_js.log", -- Path for file logging
  -- log_file_level = false -- Logging level for output to file. Set to false to disable file logging.
  -- log_console_level = vim.log.levels.ERROR -- Logging level for output to console. Set to false to disable console output.
}

for _, language in ipairs { "typescript", "javascript" } do
  require("dap").configurations[language] = {
    -- see below
    -- for Node.js files
    {
      type = "pwa-node",
      request = "launch",
      name = "Launch file",
      program = "${file}",
      cwd = "${workspaceFolder}",
    },

    -- for node processes like express applications
    {
      type = "pwa-node",
      request = "attach",
      name = "Attach",
      processId = require("dap.utils").pick_process,
      cwd = "${workspaceFolder}",
    },

    -- for web applications
    {
      type = "pwa-chrome",
      request = "launch",
      name = 'Start Chrome with "localhost"',
      url = "http://localhost:3000",
      webRoot = "${workspaceFolder}",
      userDataDir = "${workspaceFolder}/.vscode/vscode-chrome-debug-userdatadir",
    },
  }
end

--     ---@diagnostic disable-next-line: missing-fields

-- require("dap").adapters["pwa-node"] = {
--   type = "server",
--   host = "localhost",
--   port = "${port}",
--   executable = {
--     command = "js-debug-adapter", -- As I'm using mason, this will be in the path
--     args = { "${port}" },
--   },
-- }
--
--     -- require("dap").adapter.debugpy = {
--     --   {
--     --     type = "executable",
--     --     command = "/usr/bin/python",
--     --     args = { "-m", "debugpy.adapter" },
--     --   },
--     -- }

--   "microsoft/vscode-js-debug",
-- opt = true,
-- run = "npm install --legacy-peer-deps && npx gulp vsDebugServerBundle && mv dist out"

-- return {
--   "mfussenegger/nvim-dap",
--   dependencies = {
--     { "theHamsta/nvim-dap-virtual-text", config = true },
--   },
--   config = function()
--     local dap = require "dap"
--     ---@diagnostic disable-next-line: missing-fields
--     require("dap").adapters["pwa-node"] = {
--       type = "server",
--       host = "localhost",
--       port = "${port}",
--       executable = {
--         command = "js-debug-adapter", -- As I'm using mason, this will be in the path
--         args = { "${port}" },
--       },
--     }
--
--     -- require("dap").adapter.debugpy = {
--     --   {
--     --     type = "executable",
--     --     command = "/usr/bin/python",
--     --     args = { "-m", "debugpy.adapter" },
--     --   },
--     -- }
--
--     for _, language in ipairs { "typescript", "javascript" } do
--       require("dap").configurations[language] = {
--         {
--           type = "pwa-node",
--           request = "launch",
--           name = "Launch file",
--           program = "${file}",
--           cwd = "${workspaceFolder}",
--         },
--       }
--     end
--   end,
-- }
